package com.webank.blockchain.acct.gov.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.fisco.bcos.channel.client.TransactionSucCallback;
import org.fisco.bcos.channel.event.filter.EventLogPushWithDecodeCallback;
import org.fisco.bcos.web3j.abi.EventEncoder;
import org.fisco.bcos.web3j.abi.FunctionEncoder;
import org.fisco.bcos.web3j.abi.FunctionReturnDecoder;
import org.fisco.bcos.web3j.abi.TypeReference;
import org.fisco.bcos.web3j.abi.datatypes.Address;
import org.fisco.bcos.web3j.abi.datatypes.Bool;
import org.fisco.bcos.web3j.abi.datatypes.DynamicArray;
import org.fisco.bcos.web3j.abi.datatypes.Event;
import org.fisco.bcos.web3j.abi.datatypes.Function;
import org.fisco.bcos.web3j.abi.datatypes.Type;
import org.fisco.bcos.web3j.abi.datatypes.generated.Uint16;
import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;
import org.fisco.bcos.web3j.abi.datatypes.generated.Uint8;
import org.fisco.bcos.web3j.crypto.Credentials;
import org.fisco.bcos.web3j.protocol.Web3j;
import org.fisco.bcos.web3j.protocol.core.RemoteCall;
import org.fisco.bcos.web3j.protocol.core.methods.response.Log;
import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.fisco.bcos.web3j.tuples.generated.Tuple1;
import org.fisco.bcos.web3j.tuples.generated.Tuple2;
import org.fisco.bcos.web3j.tuples.generated.Tuple3;
import org.fisco.bcos.web3j.tuples.generated.Tuple4;
import org.fisco.bcos.web3j.tuples.generated.Tuple5;
import org.fisco.bcos.web3j.tuples.generated.Tuple8;
import org.fisco.bcos.web3j.tx.Contract;
import org.fisco.bcos.web3j.tx.TransactionManager;
import org.fisco.bcos.web3j.tx.gas.ContractGasProvider;
import org.fisco.bcos.web3j.tx.txdecode.TransactionDecoder;

/**
 * Auto generated code.
 *
 * <p><strong>Do not modify!</strong>
 *
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.fisco.bcos.web3j.codegen.SolidityFunctionWrapperGenerator in the <a
 * href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version none.
 */
@SuppressWarnings("unchecked")
public class WEGovernance extends Contract {
    public static final String[] BINARY_ARRAY = {
        "60806040526000600c60146101000a81548160ff021916908360ff1602179055503480156200002d57600080fd5b506040516020806200ab5a833981018060405281019080805190602001909291905050506000336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061271060056004018190555081600c60146101000a81548160ff021916908360ff160217905550620000c46200012d565b604051809103906000f080158015620000e1573d6000803e3d6000fd5b50905080600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050506200013e565b60405161644d806200470d83390190565b6145bf806200014e6000396000f300608060405260043610610112576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630a0155e5146101175780630b8160451461015c57806313af40351461024a5780633204afb91461028d5780634fb2e45d14610300578063669271de146103435780637359f8eb146103e05780638785030e14610465578063a02b161e146104d7578063a5428b031461051c578063a683e853146105bc578063a730117e1461065c578063adc1fb77146106bb578063b2bdfa7b14610777578063b3032be8146107ce578063c3d4cb0b14610825578063c5c03af3146108e8578063c9d27afe14610919578063deca63811461096a578063faf689bd146109bd575b600080fd5b34801561012357600080fd5b5061014260048036038101908080359060200190929190505050610a8c565b604051808215151515815260200191505060405180910390f35b34801561016857600080fd5b5061018760048036038101908080359060200190929190505050610aa9565b604051808981526020018873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018761ffff1661ffff1681526020018661ffff1661ffff1681526020018560ff1660ff1681526020018460ff1660ff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018261ffff1661ffff1681526020019850505050505050505060405180910390f35b34801561025657600080fd5b5061028b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610ae4565b005b34801561029957600080fd5b506102e660048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803561ffff169060200190929190505050610c6b565b604051808215151515815260200191505060405180910390f35b34801561030c57600080fd5b50610341600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610fe0565b005b34801561034f57600080fd5b506103bf600480360381019080803560ff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803561ffff1690602001909291905050506112d5565b60405180831515151581526020018281526020019250505060405180910390f35b3480156103ec57600080fd5b5061044b60048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506116a1565b604051808215151515815260200191505060405180910390f35b34801561047157600080fd5b506104bd60048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803560ff169060200190929190505050611997565b604051808215151515815260200191505060405180910390f35b3480156104e357600080fd5b5061050260048036038101908080359060200190929190505050611ef9565b604051808215151515815260200191505060405180910390f35b34801561052857600080fd5b506105a260048036038101908080359060200190929190803560ff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803561ffff169060200190929190505050612116565b604051808215151515815260200191505060405180910390f35b3480156105c857600080fd5b5061064260048036038101908080359060200190929190803560ff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803561ffff16906020019092919050505061213f565b604051808215151515815260200191505060405180910390f35b34801561066857600080fd5b5061069d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612508565b604051808261ffff1661ffff16815260200191505060405180910390f35b3480156106c757600080fd5b506106e660048036038101908080359060200190929190505050612525565b604051808560ff1660ff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018261ffff1661ffff16815260200194505050505060405180910390f35b34801561078357600080fd5b5061078c61254e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156107da57600080fd5b506107e3612573565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561083157600080fd5b5061083a61259d565b6040518080602001806020018461ffff1661ffff168152602001838103835286818151815260200191508051906020019060200280838360005b8381101561088f578082015181840152602081019050610874565b50505050905001838103825285818151815260200191508051906020019060200280838360005b838110156108d15780820151818401526020810190506108b6565b505050509050019550505050505060405180910390f35b3480156108f457600080fd5b506108fd6125b7565b604051808260ff1660ff16815260200191505060405180910390f35b34801561092557600080fd5b50610950600480360381019080803590602001909291908035151590602001909291905050506125ca565b604051808215151515815260200191505060405180910390f35b34801561097657600080fd5b506109a360048036038101908080359060200190929190803561ffff169060200190929190505050612879565b604051808215151515815260200191505060405180910390f35b3480156109c957600080fd5b50610a726004803603810190808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290803561ffff1690602001909291905050506129ff565b604051808215151515815260200191505060405180910390f35b6000610aa2826005612c9c90919063ffffffff16565b9050919050565b600080600080600080600080610ac9896005612ccf90919063ffffffff16565b97509750975097509750975097509750919395975091939597565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610bce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f57454261736963417574683a206f6e6c79206f776e657220697320617574686f81526020017f72697a65642e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167fc66d1d23a5b7baf1f496bb19f580d7b12070ad5a08a758c990db97d961fa33a660405160405180910390a350565b60008084600b856000866000600c60149054906101000a900460ff1660ff161480610cbe57506000600c60149054906101000a900460ff1660ff1614158015610cbd5750610cbc8585858585612116565b5b5b1515610d58576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001807f5745476f7665726e616e63653a2076616c69642072657175657374206661696c81526020017f65642e000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fb47e0168a6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015610e1557600080fd5b505af1158015610e29573d6000803e3d6000fd5b505050506040513d6020811015610e3f57600080fd5b81019080805190602001909291905050509550600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614151515610f1d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004",
        "0180806020018281038252602f8152602001807f5745476f7665726e616e63653a2077656967687420616464726573732073686f81526020017f756c6420626520657869737465642e000000000000000000000000000000000081525060400191505060405180910390fd5b610f3386896001612fa49092919063ffffffff16565b9650868015610f5557506000600c60149054906101000a900460ff1660ff1614155b15610fd357610f638a611ef9565b508573ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff168b7fbe862419c4c6ab3a4c8f03ed6cccfe521ccdafa57ffbdcf2cba5c13a6b38b4a38b604051808261ffff1661ffff16815260200191505060405180910390a45b5050505050509392505050565b80600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ff869838826040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561109e57600080fd5b505af11580156110b2573d6000803e3d6000fd5b505050506040513d60208110156110c857600080fd5b8101908080519060200190929190505050151561114d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f45787465726e616c204163636f756e742073686f756c64206e6f726d616c000081525060200191505060405180910390fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611237576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f57454261736963417574683a206f6e6c79206f776e657220697320617574686f81526020017f72697a65642e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fc66d1d23a5b7baf1f496bb19f580d7b12070ad5a08a758c990db97d961fa33a660405160405180910390a35050565b6000806000600c60149054906101000a900460ff1660ff16141580156114025750611401600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fb47e016336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156113b657600080fd5b505af11580156113ca573d6000803e3d6000fd5b505050506040513d60208110156113e057600080fd5b8101908080519060200190929190505050600161314e90919063ffffffff16565b5b1515611476576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f566f74652073686f756c6420626520696e20746865206c69737400000000000081525060200191505060405180910390fd5b6115cd6001606060405190810160405290816001820180548060200260200160405190810160405280929190818152602001828054801561150c57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116114c2575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561158c57602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff16815260200190600201906020826001010492830192600103820291508084116115535790505b505050505081526020016003820160009054906101000a900461ffff1661ffff1661ffff16815250508787878760056131f99095949392919063ffffffff16565b80925081935050508473ffffffffffffffffffffffffffffffffffffffff168660ff16827f6bc2a40e2ac753b31d589730c2651eeb053a0abb859435dadcbb916fa464227a878730604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018361ffff1661ffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060405180910390a494509492505050565b60008360028385600080600c60149054906101000a900460ff1660ff1614806116f257506000600c60149054906101000a900460ff1660ff16141580156116f157506116f08585858585612116565b5b5b151561178c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001807f5745476f7665726e616e63653a2076616c69642072657175657374206661696c81526020017f65642e000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639d33dc0d89896040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b15801561187d57600080fd5b505af1158015611891573d6000803e3d6000fd5b505050506040513d60208110156118a757600080fd5b810190808051906020019092919050505015611986576000600c60149054906101000a900460ff1660ff1614156118e1576001955061198b565b6118ea89611ef9565b508673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff168a7fa0dd869065b38aa1a220ec058eddb6891551fe08ec77c7f01b826e0205ca04a530604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a46001955061198b565b600095505b50505050509392505050565b60008382846000806000600c60149054906101000a900460ff1660ff1614806119e857506000600c60149054906101000a900460ff1660ff16141580156119e757506119e68585858585612116565b5b5b1515611a82576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001807f5745476f7665726e616e63653a2076616c69642072657175657374206661696c81526020017f65642e000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b60038760ff161480611a97575060048760ff16145b80611aa5575060058760ff16145b1515611b19576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f756e76616c6964206f70657220747970652e000000000000000000000000000081525060200191505060405180910390fd5b60038760ff161415611c2457600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638d1fdf2f896040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015611be257600080fd5b505af1158015611bf6573d6000803e3d6000fd5b505050506040513d6020811015611c0c57600080fd5b81019080805190602001909291905050509550611e2b565b60048760ff161415611d2f57600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166345c8b1a6896040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015611ced57600080fd5b505af1158015611d01573d6000803e3d6000fd5b505050506040513d6020811015611d1757600080fd5b81019080805190602001909291905050509550611e2a565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b8c1828e896040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015611dec57600080fd5b505af1158015611e00573d6000803e3d6000fd5b505050506040513d6020811015611e1657600080fd5b810190808051906020019092919050505095505b5b858015611e4b57506000600c60149054906101000a900460ff1660ff1614155b15611eec57611e5989611ef9565b508773ffffffffffffffffffffffffffffffffffffffff16897f7581b191f13987d497d24cb5b4d210f63bd46f3f77d0e0378df7975d244c70a58930604051808360ff1660ff1681526020018273ffffffffffffffffffff",
        "ffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a360019550611eed565b5b50505050509392505050565b600080600c60149054906101000a900460ff1660ff16141580156120245750612023600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fb47e016336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015611fd857600080fd5b505af1158015611fec573d6000803e3d6000fd5b505050506040513d602081101561200257600080fd5b8101908080519060200190929190505050600161314e90919063ffffffff16565b5b1515612098576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f566f74652073686f756c6420626520696e20746865206c69737400000000000081525060200191505060405180910390fd5b6120ac82600561323290919063ffffffff16565b50817ff749e1738bb417e5c8584a97954122c20a7d6b24c00ee4282bacae10ad9b590c30604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a2919050565b6000612134868686868660056134459095949392919063ffffffff16565b905095945050505050565b600080600c60149054906101000a900460ff1660ff161415801561226a5750612269600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fb47e016336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561221e57600080fd5b505af1158015612232573d6000803e3d6000fd5b505050506040513d602081101561224857600080fd5b8101908080519060200190929190505050600161314e90919063ffffffff16565b5b15156122de576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f566f74652073686f756c6420626520696e20746865206c69737400000000000081525060200191505060405180910390fd5b6124376001606060405190810160405290816001820180548060200260200160405190810160405280929190818152602001828054801561237457602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161232a575b50505050508152602001600282018054806020026020016040519081016040528092919081815260200182805480156123f457602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff16815260200190600201906020826001010492830192600103820291508084116123bb5790505b505050505081526020016003820160009054906101000a900461ffff1661ffff1661ffff1681525050878787878760056135f5909695949392919063ffffffff16565b50809150508373ffffffffffffffffffffffffffffffffffffffff168560ff16877f6bc2a40e2ac753b31d589730c2651eeb053a0abb859435dadcbb916fa464227a868630604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018361ffff1661ffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060405180910390a495945050505050565b600061251e82600161392c90919063ffffffff16565b9050919050565b60008060008061253f8560056139ba90919063ffffffff16565b93509350935093509193509193565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60608060006125ac6001613af5565b925092509250909192565b600c60149054906101000a900460ff1681565b6000806000600c60149054906101000a900460ff1660ff16141580156126f757506126f6600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fb47e016336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156126ab57600080fd5b505af11580156126bf573d6000803e3d6000fd5b505050506040513d60208110156126d557600080fd5b8101908080519060200190929190505050600161314e90919063ffffffff16565b5b151561276b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f566f74652073686f756c6420626520696e20746865206c69737400000000000081525060200191505060405180910390fd5b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fb47e016336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561282857600080fd5b505af115801561283c573d6000803e3d6000fd5b505050506040513d602081101561285257600080fd5b81019080805190602001909291905050509050612870818585613c24565b91505092915050565b600082600a306000856000600c60149054906101000a900460ff1660ff1614806128cb57506000600c60149054906101000a900460ff1660ff16141580156128ca57506128c98585858585612116565b5b5b1515612965576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001807f5745476f7665726e616e63653a2076616c69642072657175657374206661696c81526020017f65642e000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b612979876001613cdd90919063ffffffff16565b955085801561299b57506000600c60149054906101000a900460ff1660ff1614155b156129f4576129a988611ef9565b508661ffff163073ffffffffffffffffffffffffffffffffffffffff16897fda12e990f33e8fd9f01bec2867890994cff27f098f9f69a98901cbf50ac12ee260405160405180910390a45b505050505092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612aeb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f57454261736963417574683a206f6e6c79206f776e657220697320617574686f81526020017f72697a65642e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b6000600c60149054906101000a900460ff1660ff1614151515612b76576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f696e76616c6964206d6f6465000000000000000000000000000000000000000081525060200191505060405180910390fd5b612b8e8484846001613d08909392919063ffffffff16565b90507fcc07f75dcfd5bf9d2f41e07b2dbfe2a1b85a40a81aaba9c387c25652e0c5d3ce30858585604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001806020018461ffff1661ffff168152602001838103835286818151815260200191508051906020019060200280838360005b83811015612c3c578082015181840152602081019050612c21565b50505050905001838103825285818151815260200191508051906020019060200280838360005b83811015612c7e578082015181840152602081019050612c63565b50505050905001965050505050505060405180910390a19392505050565b6000600183600501600084815260200190815260200160002060009054906101000a900460ff1660ff1614905092915050565b600080600080600080600080612ce3614367565b8a8a600073ffffffffffffffffffffffffffffffffffffffff1682600601600083815260200190815260200160002060010160059054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515612de8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f4c6962426f617264566f74653a20766f746520696420616c726561647920657881526020017f69737465642e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b8c60060160008d81526020019081526020016000206101006040519081016040529081600082015481526020016001820160009054906101000a900461ffff1661ffff1661ffff1681526020016001820160029054906101000a900461ffff1661ffff1661ffff1681526020016001820160049054906101000a900460ff1660ff1660ff1681526020016001820160059054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffff",
        "",
        "ffffffffffffffffffffffffffffffffffffffff168660020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168760020160149054906101000a900461ffff1693509350935093509193509193565b6000806000808886600073ffffffffffffffffffffffffffffffffffffffff1682600601600083815260200190815260200160002060010160059054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515614018576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f4c6962426f617264566f74653a20766f746520696420616c726561647920657881526020017f69737465642e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b6140228a8a61392c565b935060008461ffff161115156140a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f766f7465206572726f722c206e6f7420612076616c696420766f7465722e000081525060200191505060405180910390fd5b8a600601600089815260200190815260200160002092506140c3838a868a61410f565b8096508197505050505050509550959350505050565b600080826001018054905011806140f7575060008260020180549050115b15614105576000905061410a565b600190505b919050565b6000808560030160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1680156141be57508215158660040160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515145b156141e15760008660010160029054906101000a900461ffff169150915061435e565b821561421a57838660010160028282829054906101000a900461ffff160192506101000a81548161ffff021916908361ffff1602179055505b60018660030160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550828660040160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508560010160009054906101000a900461ffff1661ffff168660010160029054906101000a900461ffff1661ffff161015156143255760018660010160196101000a81548160ff021916908360ff160217905550614344565b60008660010160196101000a81548160ff021916908360ff1602179055505b60018660010160029054906101000a900461ffff16915091505b94509492505050565b6101006040519081016040528060008152602001600061ffff168152602001600061ffff168152602001600060ff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600060ff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600061ffff1681525090565b828054828255906000526020600020908101928215614464579160200282015b828111156144635782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061440b565b5b509050614471919061451f565b5090565b82805482825590600052602060002090600f0160109004810192821561450e5791602002820160005b838211156144de57835183826101000a81548161ffff021916908361ffff160217905550926020019260020160208160010104928301926001030261449e565b801561450c5782816101000a81549061ffff02191690556002016020816001010492830192600103026144de565b505b50905061451b9190614562565b5090565b61455f91905b8082111561455b57600081816101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550600101614525565b5090565b90565b61459091905b8082111561458c57600081816101000a81549061ffff021916905550600101614568565b5090565b905600a165627a7a7230582067e7e892c84a78ce387b542d9a1f65a23aa3ddaee8cda2a86ddafface254d1d400296080604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506163fa806100536000396000f300608060405260043610620000eb576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630315242914620000f057806313af403514620001815780634031d6ae14620001c757806345c8b1a61462000225578063460a42b9146200028357806346438ca014620003015780638d1fdf2f14620003875780639d33dc0d14620003e5578063a28c6fed1462000463578063ad0f024414620004fc578063b2bdfa7b146200052e578063b8c1828e1462000588578063c8e40fbf14620005e6578063fb47e0161462000644578063ff86983814620006ca575b600080fd5b348015620000fd57600080fd5b5062000134600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505062000728565b60405180831515151581526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390f35b3480156200018e57600080fd5b50620001c5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505062000a77565b005b348015620001d457600080fd5b506200020b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505062000bff565b604051808215151515815260200191505060405180910390f35b3480156200023257600080fd5b5062000269600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505062000c14565b604051808215151515815260200191505060405180910390f35b3480156200029057600080fd5b50620002e7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505062000e8e565b604051808215151515815260200191505060405180910390f35b3480156200030e57600080fd5b5062000345600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505062001079565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156200039457600080fd5b50620003cb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050620010e2565b604051808215151515815260200191505060405180910390f35b348015620003f257600080fd5b5062000449600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506200135c565b604051808215151515815260200191505060405180910390f35b3480156200047057600080fd5b50620004e2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803560ff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803561ffff1690602001909291905050506200145d565b604051808215151515815260200191505060405180910390f35b3480156200050957600080fd5b50620005146200169d565b604051808215151515815260200191505060405180910390f35b3480156200053b57600080fd5b5062000546620016af565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156200059557600080fd5b50620005cc600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050620016d4565b604051808215151515815260200191505060405180910390f35b348015620005f357600080fd5b506200062a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050620017d3565b604051808215151515815260200191505060405180910390f35b3480156200065157600080fd5b5062000688600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505062001855565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015620006d757600080fd5b506200070e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050620018be565b604051808215151515815260200191505060405180910390f35b600080600080846000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151562000843576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001807f4163636f756e744d616e616765723a2065787465726e616c4163636f756e742081526020017f616c726561647920657869737465642e0000000000000000000000000000000081525060400191505060405180910390fd5b30866200084f62002215565b808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffff",
        "",
        "900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915060008273ffffffffffffffffffffffffffffffffffffffff1614156200194f5760009250620019f7565b8190508073ffffffffffffffffffffffffffffffffffffffff16638866eaec6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015620019b757600080fd5b505af1158015620019cc573d6000803e3d6000fd5b505050506040513d6020811015620019e357600080fd5b810190808051906020019092919050505092505b5050919050565b6000806000836000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151562001b19576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c8152602001807f4163636f756e744d616e616765723a2065787465726e616c4163636f756e742081526020017f6e6f7420657869737465642e000000000000000000000000000000000000000081525060400191505060405180910390fd5b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16925082600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167f8dd2cc620baff525b40e073032a29d6c425c4bfd40ab80cfb2d0270cf7ae7d7130604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a38291508173ffffffffffffffffffffffffffffffffffffffff16632b3c0a40876040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801562001e2657600080fd5b505af115801562001e3b573d6000803e3d6000fd5b505050506040513d602081101562001e5257600080fd5b8101908080519060200190929190505050506001935050505092915050565b6000806000836000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151562001f8c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c8152602001807f4163636f756e744d616e616765723a2065787465726e616c4163636f756e742081526020017f6e6f7420657869737465642e000000000000000000000000000000000000000081525060400191505060405180910390fd5b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1692506000600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508291508473ffffffffffffffffffffffffffffffffffffffff167f8c10fb30e3dc93f1332bdb81522fd134da355b8188e1aa3e7adb3a2ca90e8e5f30604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a28173ffffffffffffffffffffffffffffffffffffffff1663ea8a1af06040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015620021ce57600080fd5b505af1158015620021e3573d6000803e3d6000fd5b505050506040513d6020811015620021fa57600080fd5b81019080805190602001909291905050509350505050919050565b6040516141a8806200222783390190560060806040526000600c60146101000a81548160ff021916908360ff1602179055503480156200002d57600080fd5b50604051604080620041a8833981018060405281019080805190602001909291908051906020019092919050505081336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061271060056004018190555080600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506000600c60156101000a81548160ff021916908360ff160217905550620001208162000128640100000000026401000000009004565b5050620002b0565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151562000213576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f57454261736963417574683a206f6e6c79206f776e657220697320617574686f81526020017f72697a65642e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167fc66d1d23a5b7baf1f496bb19f580d7b12070ad5a08a758c990db97d961fa33a660405160405180910390a350565b613ee880620002c06000396000f300608060405260043610610133576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630a0155e5146101385780630b8160451461017d5780630fb3844c1461026b57806313af40351461029c5780631400a813146102df5780631709ef07146103485780632b3c0a40146103de57806344b63d051461043957806362a5af3b14610468578063669271de146104975780636a28f000146105345780638866eaec14610563578063a02b161e14610592578063a683e853146105d7578063a730117e14610677578063adc1fb77146106d6578063b2623cb014610792578063b2bdfa7b146107e9578063b890392314610840578063c3d4cb0b14610871578063c9d27afe14610934578063ea8a1af014610985578063f5ee9c7a146109b4575b600080fd5b34801561014457600080fd5b5061016360048036038101908080359060200190929190505050610a83565b604051808215151515815260200191505060405180910390f35b34801561018957600080fd5b506101a860048036038101908080359060200190929190505050610aa0565b604051808981526020018873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018761ffff1661ffff1681526020018661ffff1661ffff1681526020018560ff1660ff1681526020018460ff1660ff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018261ffff1661ffff1681526020019850505050505050505060405180910390f35b34801561027757600080fd5b50610280610adb565b604051808260ff1660ff16815260200191505060405180910390f35b3480156102a857600080fd5b506102dd600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610aee565b005b3480156102eb57600080fd5b5061032e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803561ffff169060200190929190505050610c75565b604051808215151515815260200191505060405180910390f35b34801561035457600080fd5b506103c4600480360381019080803560ff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803561ffff1690602001",
        "",
        "",
        "16141515612454576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f57454261736963417574683a206f6e6c79206f776e657220697320617574686f81526020017f72697a65642e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b6001600c60156101000a81548160ff021916908360ff16021790555061247a60016134e0565b5061249384848460016135c3909392919063ffffffff16565b50600190509392505050565b6000600183600501600084815260200190815260200160002060009054906101000a900460ff1660ff1614905092915050565b6000806000806000806000806124e6613c22565b8a8a600073ffffffffffffffffffffffffffffffffffffffff1682600601600083815260200190815260200160002060010160059054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515156125eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f4c6962426f617264566f74653a20766f746520696420616c726561647920657881526020017f69737465642e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b8c60060160008d81526020019081526020016000206101006040519081016040529081600082015481526020016001820160009054906101000a900461ffff1661ffff1661ffff1681526020016001820160029054906101000a900461ffff1661ffff1661ffff1681526020016001820160049054906101000a900460ff1660ff1660ff1681526020016001820160059054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160199054906101000a900460ff1660ff1660ff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160149054906101000a900461ffff1661ffff1661ffff16815250509250826000015183608001518460200151856040015186606001518760a001518860c001518960e001519a509a509a509a509a509a509a509a505050509295985092959890939650565b6000808460000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081141561290057846001018490806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550508460020183908060018154018082558091505090600182039060005260206000209060109182820401919006600202909192909190916101000a81548161ffff021916908361ffff1602179055505084600101805490508560000160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612945565b82856002016001830381548110151561291557fe5b90600052602060002090601091828204019190066002026101000a81548161ffff021916908361ffff1602179055505b60019150509392505050565b600061295d878761249f565b15612af2578373ffffffffffffffffffffffffffffffffffffffff1687600601600088815260200190815260200160002060010160059054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480156129ff57508460ff1687600601600088815260200190815260200160002060010160049054906101000a900460ff1660ff16145b8015612a6e57508273ffffffffffffffffffffffffffffffffffffffff1687600601600088815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b8015612aa757508161ffff1687600601600088815260200190815260200160002060020160149054906101000a900461ffff1661ffff16145b8015612adb5750600187600601600088815260200190815260200160002060010160199054906101000a900460ff1660ff16145b15612ae95760019050612af7565b60009050612af7565b600090505b9695505050505050565b6000808760040160008154809291906001019190505550612b2b88888a6004015489898989612d4d565b91509150965096945050505050565b60008282600073ffffffffffffffffffffffffffffffffffffffff1682600601600083815260200190815260200160002060010160059054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515612c41576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f4c6962426f617264566f74653a20766f746520696420616c726561647920657881526020017f69737465642e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600085600501600086815260200190815260200160002060006101000a81548160ff021916908360ff1602179055508460060160008581526020019081526020016000206000808201600090556001820160006101000a81549061ffff02191690556001820160026101000a81549061ffff02191690556001820160046101000a81549060ff02191690556001820160056101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160196101000a81549060ff02191690556002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556002820160146101000a81549061ffff02191690555050505092915050565b6000806000612d5a613c22565b8a89600073ffffffffffffffffffffffffffffffffffffffff1682600601600083815260200190815260200160002060010160059054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515612e5e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001807f4c6962426f617264566f74653a20766f7465206964206e6f742065786973746581526020017f642e00000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b8b604001519350610100604051908101604052808c81526020018561ffff168152602001600061ffff1681526020018b60ff1681526020018a73ffffffffffffffffffffffffffffffffffffffff168152602001600060ff1681526020018973ffffffffffffffffffffffffffffffffffffffff1681526020018861ffff168152509250828d60060160008d81526020019081526020016000206000820151816000015560208201518160010160006101000a81548161ffff021916908361ffff16021790555060408201518160010160026101000a81548161ffff021916908361ffff16021790555060608201518160010160046101000a81548160ff021916908360ff16021790555060808201518160010160056101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a08201518160010160196101000a81548160ff021916908360ff16021790555060c08201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060e08201518160020160146101000a81548161ffff021916908361ffff16021790555090505060018d60050160008d815260200190815260200160002060006101000a81548160ff021916908360ff16021790555060018b955095505050505097509795505050505050565b60008060008460000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054915084600201600183038154811015156130e157fe5b90600052602060002090601091828204019190066002029054906101000a900461ffff169050809250505092915050565b6000806000808585600073ffffffffffffffffffffffffffffffffffffffff1682600601600083815260200190815260200160002060010160059054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561321d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f4c6962426f617264566f74653a20766f746520696420616c726561647920657881526020017f69737465642e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b61323a886006016000898152602001908152602001600020613744565b9550955095509550505092959194509250565b606080600083600101846002018560030160009054906101000a900461ffff16828054806020026020016040519081016040528092919081815260200182805480156132ee57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116132a4575b505050505092508180548060200260200160405190810160405280929190818152602001828054801561336857602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff168152602001906002019060208260010104928301926001038202915080841161332f5790505b505050505091509250925092509193909250565b6000808360000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190",
        "8152602001600020549050600081148061340d5750600084600201600183038154811015156133e357fe5b90600052602060002090601091828204019190066002029054906101000a900461ffff1661ffff16145b1561341b5760009150613420565b600191505b5092915050565b60008060009050613449600186868660056137c890949392919063ffffffff16565b80925081935050508473ffffffffffffffffffffffffffffffffffffffff16847f04a4fe0bd778eb9d1e84c14e70e87a6fa39d0121e01a1ca803cd3aaf42c6b13c853060405180831515151581526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a3509392505050565b600080600090505b826001018054905081101561358457826000016000846001018381548110151561350e57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000905580806001019150506134e8565b8260010160006135949190613ca6565b8260020160006135a49190613cc7565b8260030160006101000a81549061ffff02191690556001915050919050565b600080856135d081613994565b151561366a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001807f4c6962426f617264566f74653a20766f746520776569676874206973206e6f7481526020017f20656d7074792e0000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b85876001019080519060200190613682929190613cef565b508487600201908051906020019061369b929190613d79565b50838760030160006101000a81548161ffff021916908361ffff160217905550600091505b8551821015613736576001820187600001600088858151811015156136e157fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081806001019250506136c0565b600192505050949350505050565b6000806000808460010160049054906101000a900460ff168560010160059054906101000a900473ffffffffffffffffffffffffffffffffffffffff168660020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168760020160149054906101000a900461ffff1693509350935093509193509193565b6000806000808886600073ffffffffffffffffffffffffffffffffffffffff1682600601600083815260200190815260200160002060010160059054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515156138d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f4c6962426f617264566f74653a20766f746520696420616c726561647920657881526020017f69737465642e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b6138dd8a8a613084565b935060008461ffff1611151561395b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f766f7465206572726f722c206e6f7420612076616c696420766f7465722e000081525060200191505060405180910390fd5b8a6006016000898152602001908152602001600020925061397e838a868a6139ca565b8096508197505050505050509550959350505050565b600080826001018054905011806139b2575060008260020180549050115b156139c057600090506139c5565b600190505b919050565b6000808560030160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff168015613a7957508215158660040160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515145b15613a9c5760008660010160029054906101000a900461ffff1691509150613c19565b8215613ad557838660010160028282829054906101000a900461ffff160192506101000a81548161ffff021916908361ffff1602179055505b60018660030160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550828660040160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508560010160009054906101000a900461ffff1661ffff168660010160029054906101000a900461ffff1661ffff16101515613be05760018660010160196101000a81548160ff021916908360ff160217905550613bff565b60008660010160196101000a81548160ff021916908360ff1602179055505b60018660010160029054906101000a900461ffff16915091505b94509492505050565b6101006040519081016040528060008152602001600061ffff168152602001600061ffff168152602001600060ff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600060ff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600061ffff1681525090565b5080546000825590600052602060002090810190613cc49190613e23565b50565b50805460008255600f016010900490600052602060002090810190613cec9190613e23565b50565b828054828255906000526020600020908101928215613d68579160200282015b82811115613d675782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190613d0f565b5b509050613d759190613e48565b5090565b82805482825590600052602060002090600f01601090048101928215613e125791602002820160005b83821115613de257835183826101000a81548161ffff021916908361ffff1602179055509260200192600201602081600101049283019260010302613da2565b8015613e105782816101000a81549061ffff0219169055600201602081600101049283019260010302613de2565b505b509050613e1f9190613e8b565b5090565b613e4591905b80821115613e41576000816000905550600101613e29565b5090565b90565b613e8891905b80821115613e8457600081816101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550600101613e4e565b5090565b90565b613eb991905b80821115613eb557600081816101000a81549061ffff021916905550600101613e91565b5090565b905600a165627a7a723058209d7484ea5c9ebbec655f1265291b56d3d834a6f00f53cb1906e5e11ce3d882c50029a165627a7a72305820d020140122fefc8e805edbf10d4957f9fb88403090bb523df9065c02984073850029"
    };

    public static final String BINARY = String.join("", BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {
        "[{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"passed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getRequestInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint16\"},{\"name\":\"\",\"type\":\"uint16\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"externalAccount\",\"type\":\"address\"},{\"name\":\"weight\",\"type\":\"uint16\"}],\"name\":\"setWeight\",\"outputs\":[{\"name\":\"b\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"transferOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"txType\",\"type\":\"uint8\"},{\"name\":\"requestAddress\",\"type\":\"address\"},{\"name\":\"newAddress\",\"type\":\"address\"},{\"name\":\"newValue\",\"type\":\"uint16\"}],\"name\":\"register\",\"outputs\":[{\"name\":\"b\",\"type\":\"bool\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"newExternalAccount\",\"type\":\"address\"},{\"name\":\"oldExternalAccount\",\"type\":\"address\"}],\"name\":\"setExternalAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"externalAccount\",\"type\":\"address\"},{\"name\":\"oper\",\"type\":\"uint8\"}],\"name\":\"doOper\",\"outputs\":[{\"name\":\"b\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"unregister\",\"outputs\":[{\"name\":\"b\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"txType\",\"type\":\"uint8\"},{\"name\":\"requestAddress\",\"type\":\"address\"},{\"name\":\"newAddress\",\"type\":\"address\"},{\"name\":\"newValue\",\"type\":\"uint16\"}],\"name\":\"requestReady\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"txType\",\"type\":\"uint8\"},{\"name\":\"requestAddress\",\"type\":\"address\"},{\"name\":\"newAddress\",\"type\":\"address\"},{\"name\":\"newValue\",\"type\":\"uint16\"}],\"name\":\"register\",\"outputs\":[{\"name\":\"b\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"externalAccount\",\"type\":\"address\"}],\"name\":\"getVoteWeight\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getVoteParas\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAccountManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWeightInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint16[]\"},{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_mode\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[{\"name\":\"b\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"threshold\",\"type\":\"uint16\"}],\"name\":\"setThreshold\",\"outputs\":[{\"name\":\"b\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"address[]\"},{\"name\":\"value\",\"type\":\"uint16[]\"},{\"name\":\"threshold\",\"type\":\"uint16\"}],\"name\":\"init\",\"outputs\":[{\"name\":\"b\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"mode\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"accountManagerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"governanceAddress\",\"type\":\"address\"}],\"name\":\"LogGovernSetAccountManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"newExternalAccount\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"oldExternalAccount\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"accountManagerAddress\",\"type\":\"address\"}],\"name\":\"LogGovernExternalAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"externalAccount\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"oper\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"accountManagerAddress\",\"type\":\"address\"}],\"name\":\"LogGovernOper\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"externalAccount\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"threshold\",\"type\":\"uint16\"}],\"name\":\"LogGovernSetThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"externalAccount\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"weightAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weight\",\"type\":\"uint16\"}],\"name\":\"LogGovernSetWeight\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"externalAccount\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"key\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint16[]\"},{\"indexed\":false,\"name\":\"threshold\",\"type\":\"uint16\"}],\"name\":\"LogGovernInitWeight\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"txType\",\"type\":\"uint8\"},{\"indexed\":true,\"name\":\"requestAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newValue\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"LogRegister\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"LogUnregister\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"externalAccount\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"flag\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"LogVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"}]"
    };

    public static final String ABI = String.join("", ABI_ARRAY);

    public static final TransactionDecoder transactionDecoder = new TransactionDecoder(ABI, BINARY);

    public static final String FUNC_PASSED = "passed";

    public static final String FUNC_GETREQUESTINFO = "getRequestInfo";

    public static final String FUNC_SETOWNER = "setOwner";

    public static final String FUNC_SETWEIGHT = "setWeight";

    public static final String FUNC_TRANSFEROWNER = "transferOwner";

    public static final String FUNC_REGISTER = "register";

    public static final String FUNC_SETEXTERNALACCOUNT = "setExternalAccount";

    public static final String FUNC_DOOPER = "doOper";

    public static final String FUNC_UNREGISTER = "unregister";

    public static final String FUNC_REQUESTREADY = "requestReady";

    public static final String FUNC_GETVOTEWEIGHT = "getVoteWeight";

    public static final String FUNC_GETVOTEPARAS = "getVoteParas";

    public static final String FUNC__OWNER = "_owner";

    public static final String FUNC_GETACCOUNTMANAGER = "getAccountManager";

    public static final String FUNC_GETWEIGHTINFO = "getWeightInfo";

    public static final String FUNC__MODE = "_mode";

    public static final String FUNC_VOTE = "vote";

    public static final String FUNC_SETTHRESHOLD = "setThreshold";

    public static final String FUNC_INIT = "init";

    public static final Event LOGGOVERNSETACCOUNTMANAGER_EVENT =
            new Event(
                    "LogGovernSetAccountManager",
                    Arrays.<TypeReference<?>>asList(
                            new TypeReference<Address>(true) {}, new TypeReference<Address>() {}));;

    public static final Event LOGGOVERNEXTERNALACCOUNT_EVENT =
            new Event(
                    "LogGovernExternalAccount",
                    Arrays.<TypeReference<?>>asList(
                            new TypeReference<Uint256>(true) {},
                            new TypeReference<Address>(true) {},
                            new TypeReference<Address>(true) {},
                            new TypeReference<Address>() {}));;

    public static final Event LOGGOVERNOPER_EVENT =
            new Event(
                    "LogGovernOper",
                    Arrays.<TypeReference<?>>asList(
                            new TypeReference<Uint256>(true) {},
                            new TypeReference<Address>(true) {},
                            new TypeReference<Uint8>() {},
                            new TypeReference<Address>() {}));;

    public static final Event LOGGOVERNSETTHRESHOLD_EVENT =
            new Event(
                    "LogGovernSetThreshold",
                    Arrays.<TypeReference<?>>asList(
                            new TypeReference<Uint256>(true) {},
                            new TypeReference<Address>(true) {},
                            new TypeReference<Uint16>(true) {}));;

    public static final Event LOGGOVERNSETWEIGHT_EVENT =
            new Event(
                    "LogGovernSetWeight",
                    Arrays.<TypeReference<?>>asList(
                            new TypeReference<Uint256>(true) {},
                            new TypeReference<Address>(true) {},
                            new TypeReference<Address>(true) {},
                            new TypeReference<Uint16>() {}));;

    public static final Event LOGGOVERNINITWEIGHT_EVENT =
            new Event(
                    "LogGovernInitWeight",
                    Arrays.<TypeReference<?>>asList(
                            new TypeReference<Address>() {},
                            new TypeReference<DynamicArray<Address>>() {},
                            new TypeReference<DynamicArray<Uint16>>() {},
                            new TypeReference<Uint16>() {}));;

    public static final Event LOGREGISTER_EVENT =
            new Event(
                    "LogRegister",
                    Arrays.<TypeReference<?>>asList(
                            new TypeReference<Uint256>(true) {},
                            new TypeReference<Uint8>(true) {},
                            new TypeReference<Address>(true) {},
                            new TypeReference<Address>() {},
                            new TypeReference<Uint16>() {},
                            new TypeReference<Address>() {}));;

    public static final Event LOGUNREGISTER_EVENT =
            new Event(
                    "LogUnregister",
                    Arrays.<TypeReference<?>>asList(
                            new TypeReference<Uint256>(true) {}, new TypeReference<Address>() {}));;

    public static final Event LOGVOTE_EVENT =
            new Event(
                    "LogVote",
                    Arrays.<TypeReference<?>>asList(
                            new TypeReference<Uint256>(true) {},
                            new TypeReference<Address>(true) {},
                            new TypeReference<Bool>() {},
                            new TypeReference<Address>() {}));;

    public static final Event LOGSETOWNER_EVENT =
            new Event(
                    "LogSetOwner",
                    Arrays.<TypeReference<?>>asList(
                            new TypeReference<Address>(true) {},
                            new TypeReference<Address>(true) {}));;

    @Deprecated
    protected WEGovernance(
            String contractAddress,
            Web3j web3j,
            Credentials credentials,
            BigInteger gasPrice,
            BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected WEGovernance(
            String contractAddress,
            Web3j web3j,
            Credentials credentials,
            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected WEGovernance(
            String contractAddress,
            Web3j web3j,
            TransactionManager transactionManager,
            BigInteger gasPrice,
            BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected WEGovernance(
            String contractAddress,
            Web3j web3j,
            TransactionManager transactionManager,
            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static TransactionDecoder getTransactionDecoder() {
        return transactionDecoder;
    }

    public RemoteCall<Boolean> passed(BigInteger id) {
        final Function function =
                new Function(
                        FUNC_PASSED,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(id)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<
                    Tuple8<
                            BigInteger,
                            String,
                            BigInteger,
                            BigInteger,
                            BigInteger,
                            BigInteger,
                            String,
                            BigInteger>>
            getRequestInfo(BigInteger id) {
        final Function function =
                new Function(
                        FUNC_GETREQUESTINFO,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(id)),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Uint256>() {},
                                new TypeReference<Address>() {},
                                new TypeReference<Uint16>() {},
                                new TypeReference<Uint16>() {},
                                new TypeReference<Uint8>() {},
                                new TypeReference<Uint8>() {},
                                new TypeReference<Address>() {},
                                new TypeReference<Uint16>() {}));
        return new RemoteCall<
                Tuple8<
                        BigInteger,
                        String,
                        BigInteger,
                        BigInteger,
                        BigInteger,
                        BigInteger,
                        String,
                        BigInteger>>(
                new Callable<
                        Tuple8<
                                BigInteger,
                                String,
                                BigInteger,
                                BigInteger,
                                BigInteger,
                                BigInteger,
                                String,
                                BigInteger>>() {
                    @Override
                    public Tuple8<
                                    BigInteger,
                                    String,
                                    BigInteger,
                                    BigInteger,
                                    BigInteger,
                                    BigInteger,
                                    String,
                                    BigInteger>
                            call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<
                                BigInteger,
                                String,
                                BigInteger,
                                BigInteger,
                                BigInteger,
                                BigInteger,
                                String,
                                BigInteger>(
                                (BigInteger) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue(),
                                (BigInteger) results.get(3).getValue(),
                                (BigInteger) results.get(4).getValue(),
                                (BigInteger) results.get(5).getValue(),
                                (String) results.get(6).getValue(),
                                (BigInteger) results.get(7).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> setOwner(String owner) {
        final Function function =
                new Function(
                        FUNC_SETOWNER,
                        Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(owner)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void setOwner(String owner, TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETOWNER,
                        Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(owner)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String setOwnerSeq(String owner) {
        final Function function =
                new Function(
                        FUNC_SETOWNER,
                        Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(owner)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<String> getSetOwnerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETOWNER,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<String>((String) results.get(0).getValue());
    }

    public RemoteCall<TransactionReceipt> setWeight(
            BigInteger id, String externalAccount, BigInteger weight) {
        final Function function =
                new Function(
                        FUNC_SETWEIGHT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(id),
                                new org.fisco.bcos.web3j.abi.datatypes.Address(externalAccount),
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint16(weight)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void setWeight(
            BigInteger id,
            String externalAccount,
            BigInteger weight,
            TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETWEIGHT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(id),
                                new org.fisco.bcos.web3j.abi.datatypes.Address(externalAccount),
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint16(weight)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String setWeightSeq(BigInteger id, String externalAccount, BigInteger weight) {
        final Function function =
                new Function(
                        FUNC_SETWEIGHT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(id),
                                new org.fisco.bcos.web3j.abi.datatypes.Address(externalAccount),
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint16(weight)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple3<BigInteger, String, BigInteger> getSetWeightInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETWEIGHT,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Uint256>() {},
                                new TypeReference<Address>() {},
                                new TypeReference<Uint16>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple3<BigInteger, String, BigInteger>(
                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue());
    }

    public Tuple1<Boolean> getSetWeightOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_SETWEIGHT,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<Boolean>((Boolean) results.get(0).getValue());
    }

    public RemoteCall<TransactionReceipt> transferOwner(String owner) {
        final Function function =
                new Function(
                        FUNC_TRANSFEROWNER,
                        Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(owner)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void transferOwner(String owner, TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_TRANSFEROWNER,
                        Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(owner)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String transferOwnerSeq(String owner) {
        final Function function =
                new Function(
                        FUNC_TRANSFEROWNER,
                        Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(owner)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<String> getTransferOwnerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_TRANSFEROWNER,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<String>((String) results.get(0).getValue());
    }

    public RemoteCall<TransactionReceipt> register(
            BigInteger txType, String requestAddress, String newAddress, BigInteger newValue) {
        final Function function =
                new Function(
                        FUNC_REGISTER,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint8(txType),
                                new org.fisco.bcos.web3j.abi.datatypes.Address(requestAddress),
                                new org.fisco.bcos.web3j.abi.datatypes.Address(newAddress),
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint16(newValue)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void register(
            BigInteger txType,
            String requestAddress,
            String newAddress,
            BigInteger newValue,
            TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_REGISTER,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint8(txType),
                                new org.fisco.bcos.web3j.abi.datatypes.Address(requestAddress),
                                new org.fisco.bcos.web3j.abi.datatypes.Address(newAddress),
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint16(newValue)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String registerSeq(
            BigInteger txType, String requestAddress, String newAddress, BigInteger newValue) {
        final Function function =
                new Function(
                        FUNC_REGISTER,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint8(txType),
                                new org.fisco.bcos.web3j.abi.datatypes.Address(requestAddress),
                                new org.fisco.bcos.web3j.abi.datatypes.Address(newAddress),
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint16(newValue)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple4<BigInteger, String, String, BigInteger> getRegisterUint8AddressAddressUint16Input(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_REGISTER,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Uint8>() {},
                                new TypeReference<Address>() {},
                                new TypeReference<Address>() {},
                                new TypeReference<Uint16>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple4<BigInteger, String, String, BigInteger>(
                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (BigInteger) results.get(3).getValue());
    }

    public Tuple2<Boolean, BigInteger> getRegisterBoolUint256Output(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_REGISTER,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Bool>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple2<Boolean, BigInteger>(
                (Boolean) results.get(0).getValue(), (BigInteger) results.get(1).getValue());
    }

    public RemoteCall<TransactionReceipt> setExternalAccount(
            BigInteger id, String newExternalAccount, String oldExternalAccount) {
        final Function function =
                new Function(
                        FUNC_SETEXTERNALACCOUNT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(id),
                                new org.fisco.bcos.web3j.abi.datatypes.Address(newExternalAccount),
                                new org.fisco.bcos.web3j.abi.datatypes.Address(oldExternalAccount)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void setExternalAccount(
            BigInteger id,
            String newExternalAccount,
            String oldExternalAccount,
            TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETEXTERNALACCOUNT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(id),
                                new org.fisco.bcos.web3j.abi.datatypes.Address(newExternalAccount),
                                new org.fisco.bcos.web3j.abi.datatypes.Address(oldExternalAccount)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String setExternalAccountSeq(
            BigInteger id, String newExternalAccount, String oldExternalAccount) {
        final Function function =
                new Function(
                        FUNC_SETEXTERNALACCOUNT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(id),
                                new org.fisco.bcos.web3j.abi.datatypes.Address(newExternalAccount),
                                new org.fisco.bcos.web3j.abi.datatypes.Address(oldExternalAccount)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple3<BigInteger, String, String> getSetExternalAccountInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETEXTERNALACCOUNT,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Uint256>() {},
                                new TypeReference<Address>() {},
                                new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple3<BigInteger, String, String>(
                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue());
    }

    public Tuple1<Boolean> getSetExternalAccountOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_SETEXTERNALACCOUNT,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<Boolean>((Boolean) results.get(0).getValue());
    }

    public RemoteCall<TransactionReceipt> doOper(
            BigInteger id, String externalAccount, BigInteger oper) {
        final Function function =
                new Function(
                        FUNC_DOOPER,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(id),
                                new org.fisco.bcos.web3j.abi.datatypes.Address(externalAccount),
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint8(oper)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void doOper(
            BigInteger id,
            String externalAccount,
            BigInteger oper,
            TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_DOOPER,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(id),
                                new org.fisco.bcos.web3j.abi.datatypes.Address(externalAccount),
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint8(oper)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String doOperSeq(BigInteger id, String externalAccount, BigInteger oper) {
        final Function function =
                new Function(
                        FUNC_DOOPER,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(id),
                                new org.fisco.bcos.web3j.abi.datatypes.Address(externalAccount),
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint8(oper)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple3<BigInteger, String, BigInteger> getDoOperInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_DOOPER,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Uint256>() {},
                                new TypeReference<Address>() {},
                                new TypeReference<Uint8>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple3<BigInteger, String, BigInteger>(
                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue());
    }

    public Tuple1<Boolean> getDoOperOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_DOOPER,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<Boolean>((Boolean) results.get(0).getValue());
    }

    public RemoteCall<TransactionReceipt> unregister(BigInteger id) {
        final Function function =
                new Function(
                        FUNC_UNREGISTER,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(id)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void unregister(BigInteger id, TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_UNREGISTER,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(id)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String unregisterSeq(BigInteger id) {
        final Function function =
                new Function(
                        FUNC_UNREGISTER,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(id)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<BigInteger> getUnregisterInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_UNREGISTER,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<BigInteger>((BigInteger) results.get(0).getValue());
    }

    public Tuple1<Boolean> getUnregisterOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_UNREGISTER,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<Boolean>((Boolean) results.get(0).getValue());
    }

    public RemoteCall<Boolean> requestReady(
            BigInteger id,
            BigInteger txType,
            String requestAddress,
            String newAddress,
            BigInteger newValue) {
        final Function function =
                new Function(
                        FUNC_REQUESTREADY,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(id),
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint8(txType),
                                new org.fisco.bcos.web3j.abi.datatypes.Address(requestAddress),
                                new org.fisco.bcos.web3j.abi.datatypes.Address(newAddress),
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint16(newValue)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> register(
            BigInteger id,
            BigInteger txType,
            String requestAddress,
            String newAddress,
            BigInteger newValue) {
        final Function function =
                new Function(
                        FUNC_REGISTER,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(id),
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint8(txType),
                                new org.fisco.bcos.web3j.abi.datatypes.Address(requestAddress),
                                new org.fisco.bcos.web3j.abi.datatypes.Address(newAddress),
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint16(newValue)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void register(
            BigInteger id,
            BigInteger txType,
            String requestAddress,
            String newAddress,
            BigInteger newValue,
            TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_REGISTER,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(id),
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint8(txType),
                                new org.fisco.bcos.web3j.abi.datatypes.Address(requestAddress),
                                new org.fisco.bcos.web3j.abi.datatypes.Address(newAddress),
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint16(newValue)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String registerSeq(
            BigInteger id,
            BigInteger txType,
            String requestAddress,
            String newAddress,
            BigInteger newValue) {
        final Function function =
                new Function(
                        FUNC_REGISTER,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(id),
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint8(txType),
                                new org.fisco.bcos.web3j.abi.datatypes.Address(requestAddress),
                                new org.fisco.bcos.web3j.abi.datatypes.Address(newAddress),
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint16(newValue)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple5<BigInteger, BigInteger, String, String, BigInteger>
            getRegisterUint256Uint8AddressAddressUint16Input(
                    TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_REGISTER,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Uint256>() {},
                                new TypeReference<Uint8>() {},
                                new TypeReference<Address>() {},
                                new TypeReference<Address>() {},
                                new TypeReference<Uint16>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple5<BigInteger, BigInteger, String, String, BigInteger>(
                (BigInteger) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (String) results.get(3).getValue(),
                (BigInteger) results.get(4).getValue());
    }

    public Tuple1<Boolean> getRegisterBoolOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_REGISTER,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<Boolean>((Boolean) results.get(0).getValue());
    }

    public RemoteCall<BigInteger> getVoteWeight(String externalAccount) {
        final Function function =
                new Function(
                        FUNC_GETVOTEWEIGHT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Address(externalAccount)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint16>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple4<BigInteger, String, String, BigInteger>> getVoteParas(BigInteger id) {
        final Function function =
                new Function(
                        FUNC_GETVOTEPARAS,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(id)),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Uint8>() {},
                                new TypeReference<Address>() {},
                                new TypeReference<Address>() {},
                                new TypeReference<Uint16>() {}));
        return new RemoteCall<Tuple4<BigInteger, String, String, BigInteger>>(
                new Callable<Tuple4<BigInteger, String, String, BigInteger>>() {
                    @Override
                    public Tuple4<BigInteger, String, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<BigInteger, String, String, BigInteger>(
                                (BigInteger) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (String) results.get(2).getValue(),
                                (BigInteger) results.get(3).getValue());
                    }
                });
    }

    public RemoteCall<String> _owner() {
        final Function function =
                new Function(
                        FUNC__OWNER,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> getAccountManager() {
        final Function function =
                new Function(
                        FUNC_GETACCOUNTMANAGER,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Tuple3<List<String>, List<BigInteger>, BigInteger>> getWeightInfo() {
        final Function function =
                new Function(
                        FUNC_GETWEIGHTINFO,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Address>>() {},
                                new TypeReference<DynamicArray<Uint16>>() {},
                                new TypeReference<Uint16>() {}));
        return new RemoteCall<Tuple3<List<String>, List<BigInteger>, BigInteger>>(
                new Callable<Tuple3<List<String>, List<BigInteger>, BigInteger>>() {
                    @Override
                    public Tuple3<List<String>, List<BigInteger>, BigInteger> call()
                            throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<List<String>, List<BigInteger>, BigInteger>(
                                convertToNative((List<Address>) results.get(0).getValue()),
                                convertToNative((List<Uint16>) results.get(1).getValue()),
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> _mode() {
        final Function function =
                new Function(
                        FUNC__MODE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> vote(BigInteger id, Boolean flag) {
        final Function function =
                new Function(
                        FUNC_VOTE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(id),
                                new org.fisco.bcos.web3j.abi.datatypes.Bool(flag)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void vote(BigInteger id, Boolean flag, TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_VOTE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(id),
                                new org.fisco.bcos.web3j.abi.datatypes.Bool(flag)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String voteSeq(BigInteger id, Boolean flag) {
        final Function function =
                new Function(
                        FUNC_VOTE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(id),
                                new org.fisco.bcos.web3j.abi.datatypes.Bool(flag)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple2<BigInteger, Boolean> getVoteInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_VOTE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple2<BigInteger, Boolean>(
                (BigInteger) results.get(0).getValue(), (Boolean) results.get(1).getValue());
    }

    public Tuple1<Boolean> getVoteOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_VOTE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<Boolean>((Boolean) results.get(0).getValue());
    }

    public RemoteCall<TransactionReceipt> setThreshold(BigInteger id, BigInteger threshold) {
        final Function function =
                new Function(
                        FUNC_SETTHRESHOLD,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(id),
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint16(threshold)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void setThreshold(BigInteger id, BigInteger threshold, TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETTHRESHOLD,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(id),
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint16(threshold)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String setThresholdSeq(BigInteger id, BigInteger threshold) {
        final Function function =
                new Function(
                        FUNC_SETTHRESHOLD,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(id),
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint16(threshold)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple2<BigInteger, BigInteger> getSetThresholdInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETTHRESHOLD,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Uint256>() {}, new TypeReference<Uint16>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple2<BigInteger, BigInteger>(
                (BigInteger) results.get(0).getValue(), (BigInteger) results.get(1).getValue());
    }

    public Tuple1<Boolean> getSetThresholdOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_SETTHRESHOLD,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<Boolean>((Boolean) results.get(0).getValue());
    }

    public RemoteCall<TransactionReceipt> init(
            List<String> key, List<BigInteger> value, BigInteger threshold) {
        final Function function =
                new Function(
                        FUNC_INIT,
                        Arrays.<Type>asList(
                                key.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "address[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Address>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        key,
                                                        org.fisco.bcos.web3j.abi.datatypes.Address
                                                                .class)),
                                value.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "uint16[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.generated
                                                        .Uint16>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        value,
                                                        org.fisco.bcos.web3j.abi.datatypes.generated
                                                                .Uint16.class)),
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint16(threshold)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void init(
            List<String> key,
            List<BigInteger> value,
            BigInteger threshold,
            TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_INIT,
                        Arrays.<Type>asList(
                                key.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "address[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Address>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        key,
                                                        org.fisco.bcos.web3j.abi.datatypes.Address
                                                                .class)),
                                value.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "uint16[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.generated
                                                        .Uint16>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        value,
                                                        org.fisco.bcos.web3j.abi.datatypes.generated
                                                                .Uint16.class)),
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint16(threshold)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String initSeq(List<String> key, List<BigInteger> value, BigInteger threshold) {
        final Function function =
                new Function(
                        FUNC_INIT,
                        Arrays.<Type>asList(
                                key.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "address[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Address>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        key,
                                                        org.fisco.bcos.web3j.abi.datatypes.Address
                                                                .class)),
                                value.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "uint16[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.generated
                                                        .Uint16>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        value,
                                                        org.fisco.bcos.web3j.abi.datatypes.generated
                                                                .Uint16.class)),
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint16(threshold)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple3<List<String>, List<BigInteger>, BigInteger> getInitInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_INIT,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Address>>() {},
                                new TypeReference<DynamicArray<Uint16>>() {},
                                new TypeReference<Uint16>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple3<List<String>, List<BigInteger>, BigInteger>(
                convertToNative((List<Address>) results.get(0).getValue()),
                convertToNative((List<Uint16>) results.get(1).getValue()),
                (BigInteger) results.get(2).getValue());
    }

    public Tuple1<Boolean> getInitOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_INIT,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<Boolean>((Boolean) results.get(0).getValue());
    }

    public List<LogGovernSetAccountManagerEventResponse> getLogGovernSetAccountManagerEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(LOGGOVERNSETACCOUNTMANAGER_EVENT, transactionReceipt);
        ArrayList<LogGovernSetAccountManagerEventResponse> responses =
                new ArrayList<LogGovernSetAccountManagerEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogGovernSetAccountManagerEventResponse typedResponse =
                    new LogGovernSetAccountManagerEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.accountManagerAddress =
                    (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.governanceAddress =
                    (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerLogGovernSetAccountManagerEventLogFilter(
            String fromBlock,
            String toBlock,
            List<String> otherTopcs,
            EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(LOGGOVERNSETACCOUNTMANAGER_EVENT);
        registerEventLogPushFilter(ABI, BINARY, topic0, fromBlock, toBlock, otherTopcs, callback);
    }

    public void registerLogGovernSetAccountManagerEventLogFilter(
            EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(LOGGOVERNSETACCOUNTMANAGER_EVENT);
        registerEventLogPushFilter(ABI, BINARY, topic0, callback);
    }

    public List<LogGovernExternalAccountEventResponse> getLogGovernExternalAccountEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(LOGGOVERNEXTERNALACCOUNT_EVENT, transactionReceipt);
        ArrayList<LogGovernExternalAccountEventResponse> responses =
                new ArrayList<LogGovernExternalAccountEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogGovernExternalAccountEventResponse typedResponse =
                    new LogGovernExternalAccountEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newExternalAccount =
                    (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.oldExternalAccount =
                    (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.accountManagerAddress =
                    (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerLogGovernExternalAccountEventLogFilter(
            String fromBlock,
            String toBlock,
            List<String> otherTopcs,
            EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(LOGGOVERNEXTERNALACCOUNT_EVENT);
        registerEventLogPushFilter(ABI, BINARY, topic0, fromBlock, toBlock, otherTopcs, callback);
    }

    public void registerLogGovernExternalAccountEventLogFilter(
            EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(LOGGOVERNEXTERNALACCOUNT_EVENT);
        registerEventLogPushFilter(ABI, BINARY, topic0, callback);
    }

    public List<LogGovernOperEventResponse> getLogGovernOperEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(LOGGOVERNOPER_EVENT, transactionReceipt);
        ArrayList<LogGovernOperEventResponse> responses =
                new ArrayList<LogGovernOperEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogGovernOperEventResponse typedResponse = new LogGovernOperEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.externalAccount =
                    (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.oper = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.accountManagerAddress =
                    (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerLogGovernOperEventLogFilter(
            String fromBlock,
            String toBlock,
            List<String> otherTopcs,
            EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(LOGGOVERNOPER_EVENT);
        registerEventLogPushFilter(ABI, BINARY, topic0, fromBlock, toBlock, otherTopcs, callback);
    }

    public void registerLogGovernOperEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(LOGGOVERNOPER_EVENT);
        registerEventLogPushFilter(ABI, BINARY, topic0, callback);
    }

    public List<LogGovernSetThresholdEventResponse> getLogGovernSetThresholdEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(LOGGOVERNSETTHRESHOLD_EVENT, transactionReceipt);
        ArrayList<LogGovernSetThresholdEventResponse> responses =
                new ArrayList<LogGovernSetThresholdEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogGovernSetThresholdEventResponse typedResponse =
                    new LogGovernSetThresholdEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.externalAccount =
                    (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.threshold = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerLogGovernSetThresholdEventLogFilter(
            String fromBlock,
            String toBlock,
            List<String> otherTopcs,
            EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(LOGGOVERNSETTHRESHOLD_EVENT);
        registerEventLogPushFilter(ABI, BINARY, topic0, fromBlock, toBlock, otherTopcs, callback);
    }

    public void registerLogGovernSetThresholdEventLogFilter(
            EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(LOGGOVERNSETTHRESHOLD_EVENT);
        registerEventLogPushFilter(ABI, BINARY, topic0, callback);
    }

    public List<LogGovernSetWeightEventResponse> getLogGovernSetWeightEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(LOGGOVERNSETWEIGHT_EVENT, transactionReceipt);
        ArrayList<LogGovernSetWeightEventResponse> responses =
                new ArrayList<LogGovernSetWeightEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogGovernSetWeightEventResponse typedResponse = new LogGovernSetWeightEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.externalAccount =
                    (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.weightAddress = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.weight = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerLogGovernSetWeightEventLogFilter(
            String fromBlock,
            String toBlock,
            List<String> otherTopcs,
            EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(LOGGOVERNSETWEIGHT_EVENT);
        registerEventLogPushFilter(ABI, BINARY, topic0, fromBlock, toBlock, otherTopcs, callback);
    }

    public void registerLogGovernSetWeightEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(LOGGOVERNSETWEIGHT_EVENT);
        registerEventLogPushFilter(ABI, BINARY, topic0, callback);
    }

    public List<LogGovernInitWeightEventResponse> getLogGovernInitWeightEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(LOGGOVERNINITWEIGHT_EVENT, transactionReceipt);
        ArrayList<LogGovernInitWeightEventResponse> responses =
                new ArrayList<LogGovernInitWeightEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogGovernInitWeightEventResponse typedResponse = new LogGovernInitWeightEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.externalAccount =
                    (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.key = (List<String>) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.value =
                    (List<BigInteger>) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.threshold =
                    (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerLogGovernInitWeightEventLogFilter(
            String fromBlock,
            String toBlock,
            List<String> otherTopcs,
            EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(LOGGOVERNINITWEIGHT_EVENT);
        registerEventLogPushFilter(ABI, BINARY, topic0, fromBlock, toBlock, otherTopcs, callback);
    }

    public void registerLogGovernInitWeightEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(LOGGOVERNINITWEIGHT_EVENT);
        registerEventLogPushFilter(ABI, BINARY, topic0, callback);
    }

    public List<LogRegisterEventResponse> getLogRegisterEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(LOGREGISTER_EVENT, transactionReceipt);
        ArrayList<LogRegisterEventResponse> responses =
                new ArrayList<LogRegisterEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogRegisterEventResponse typedResponse = new LogRegisterEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.txType = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.requestAddress =
                    (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.newAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.newValue =
                    (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.contractAddress =
                    (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerLogRegisterEventLogFilter(
            String fromBlock,
            String toBlock,
            List<String> otherTopcs,
            EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(LOGREGISTER_EVENT);
        registerEventLogPushFilter(ABI, BINARY, topic0, fromBlock, toBlock, otherTopcs, callback);
    }

    public void registerLogRegisterEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(LOGREGISTER_EVENT);
        registerEventLogPushFilter(ABI, BINARY, topic0, callback);
    }

    public List<LogUnregisterEventResponse> getLogUnregisterEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(LOGUNREGISTER_EVENT, transactionReceipt);
        ArrayList<LogUnregisterEventResponse> responses =
                new ArrayList<LogUnregisterEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogUnregisterEventResponse typedResponse = new LogUnregisterEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.contractAddress =
                    (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerLogUnregisterEventLogFilter(
            String fromBlock,
            String toBlock,
            List<String> otherTopcs,
            EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(LOGUNREGISTER_EVENT);
        registerEventLogPushFilter(ABI, BINARY, topic0, fromBlock, toBlock, otherTopcs, callback);
    }

    public void registerLogUnregisterEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(LOGUNREGISTER_EVENT);
        registerEventLogPushFilter(ABI, BINARY, topic0, callback);
    }

    public List<LogVoteEventResponse> getLogVoteEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(LOGVOTE_EVENT, transactionReceipt);
        ArrayList<LogVoteEventResponse> responses =
                new ArrayList<LogVoteEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogVoteEventResponse typedResponse = new LogVoteEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.externalAccount =
                    (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.flag = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.contractAddress =
                    (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerLogVoteEventLogFilter(
            String fromBlock,
            String toBlock,
            List<String> otherTopcs,
            EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(LOGVOTE_EVENT);
        registerEventLogPushFilter(ABI, BINARY, topic0, fromBlock, toBlock, otherTopcs, callback);
    }

    public void registerLogVoteEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(LOGVOTE_EVENT);
        registerEventLogPushFilter(ABI, BINARY, topic0, callback);
    }

    public List<LogSetOwnerEventResponse> getLogSetOwnerEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(LOGSETOWNER_EVENT, transactionReceipt);
        ArrayList<LogSetOwnerEventResponse> responses =
                new ArrayList<LogSetOwnerEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogSetOwnerEventResponse typedResponse = new LogSetOwnerEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.contractAddress =
                    (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerLogSetOwnerEventLogFilter(
            String fromBlock,
            String toBlock,
            List<String> otherTopcs,
            EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(LOGSETOWNER_EVENT);
        registerEventLogPushFilter(ABI, BINARY, topic0, fromBlock, toBlock, otherTopcs, callback);
    }

    public void registerLogSetOwnerEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(LOGSETOWNER_EVENT);
        registerEventLogPushFilter(ABI, BINARY, topic0, callback);
    }

    @Deprecated
    public static WEGovernance load(
            String contractAddress,
            Web3j web3j,
            Credentials credentials,
            BigInteger gasPrice,
            BigInteger gasLimit) {
        return new WEGovernance(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static WEGovernance load(
            String contractAddress,
            Web3j web3j,
            TransactionManager transactionManager,
            BigInteger gasPrice,
            BigInteger gasLimit) {
        return new WEGovernance(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static WEGovernance load(
            String contractAddress,
            Web3j web3j,
            Credentials credentials,
            ContractGasProvider contractGasProvider) {
        return new WEGovernance(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static WEGovernance load(
            String contractAddress,
            Web3j web3j,
            TransactionManager transactionManager,
            ContractGasProvider contractGasProvider) {
        return new WEGovernance(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<WEGovernance> deploy(
            Web3j web3j,
            Credentials credentials,
            ContractGasProvider contractGasProvider,
            BigInteger mode) {
        String encodedConstructor =
                FunctionEncoder.encodeConstructor(
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint8(mode)));
        return deployRemoteCall(
                WEGovernance.class,
                web3j,
                credentials,
                contractGasProvider,
                BINARY,
                encodedConstructor);
    }

    public static RemoteCall<WEGovernance> deploy(
            Web3j web3j,
            TransactionManager transactionManager,
            ContractGasProvider contractGasProvider,
            BigInteger mode) {
        String encodedConstructor =
                FunctionEncoder.encodeConstructor(
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint8(mode)));
        return deployRemoteCall(
                WEGovernance.class,
                web3j,
                transactionManager,
                contractGasProvider,
                BINARY,
                encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<WEGovernance> deploy(
            Web3j web3j,
            Credentials credentials,
            BigInteger gasPrice,
            BigInteger gasLimit,
            BigInteger mode) {
        String encodedConstructor =
                FunctionEncoder.encodeConstructor(
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint8(mode)));
        return deployRemoteCall(
                WEGovernance.class,
                web3j,
                credentials,
                gasPrice,
                gasLimit,
                BINARY,
                encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<WEGovernance> deploy(
            Web3j web3j,
            TransactionManager transactionManager,
            BigInteger gasPrice,
            BigInteger gasLimit,
            BigInteger mode) {
        String encodedConstructor =
                FunctionEncoder.encodeConstructor(
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint8(mode)));
        return deployRemoteCall(
                WEGovernance.class,
                web3j,
                transactionManager,
                gasPrice,
                gasLimit,
                BINARY,
                encodedConstructor);
    }

    public static class LogGovernSetAccountManagerEventResponse {
        public Log log;

        public String accountManagerAddress;

        public String governanceAddress;
    }

    public static class LogGovernExternalAccountEventResponse {
        public Log log;

        public BigInteger id;

        public String newExternalAccount;

        public String oldExternalAccount;

        public String accountManagerAddress;
    }

    public static class LogGovernOperEventResponse {
        public Log log;

        public BigInteger id;

        public String externalAccount;

        public BigInteger oper;

        public String accountManagerAddress;
    }

    public static class LogGovernSetThresholdEventResponse {
        public Log log;

        public BigInteger id;

        public String externalAccount;

        public BigInteger threshold;
    }

    public static class LogGovernSetWeightEventResponse {
        public Log log;

        public BigInteger id;

        public String externalAccount;

        public String weightAddress;

        public BigInteger weight;
    }

    public static class LogGovernInitWeightEventResponse {
        public Log log;

        public String externalAccount;

        public List<String> key;

        public List<BigInteger> value;

        public BigInteger threshold;
    }

    public static class LogRegisterEventResponse {
        public Log log;

        public BigInteger id;

        public BigInteger txType;

        public String requestAddress;

        public String newAddress;

        public BigInteger newValue;

        public String contractAddress;
    }

    public static class LogUnregisterEventResponse {
        public Log log;

        public BigInteger id;

        public String contractAddress;
    }

    public static class LogVoteEventResponse {
        public Log log;

        public BigInteger id;

        public String externalAccount;

        public Boolean flag;

        public String contractAddress;
    }

    public static class LogSetOwnerEventResponse {
        public Log log;

        public String owner;

        public String contractAddress;
    }
}
